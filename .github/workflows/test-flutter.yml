name: "analyze"
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main

jobs:
  Flutter: # make sure the action works on a clean machine without building
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable" # or: 'beta', 'dev' or 'master'
      - run: flutter config --no-analytics
      - run: flutter --version
      - run: flutter pub get
      - run: flutter pub add flutter_coverage_badge -d
      - run: flutter test --test-randomize-ordering-seed=random --coverage
      - run: flutter pub run flutter_coverage_badge

      # - uses: invertase/github-action-dart-analyzer@v1
      #   with:
      #     # (Optional) Treat info level issues as fatal.
      #     fatal-infos: false

      #     # (Optional) Treat warning level issues as fatal
      #     # (defaults to true).
      #     fatal-warnings: false

      #     # (Optional) Whether to add annotations to GitHub actions summary / PR
      #     # review files.
      #     # (defaults to true).
      #     annotate: true

      #     # (Optional) If set to true only annotations will be created and the
      #     # GitHub action itself will not fail on Dart analyzer problems.
      #     # (defaults to false).
      #     annotate-only: false

      #     # (Optional) The working directory to run the Dart analyzer in
      #     # (defaults to `./`).
      #     working-directory: ./

# name: Dart CI

# on:
#   # Run on PRs and pushes to the default branch.
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]
#   schedule:
#     - cron: "0 0 * * 0"

# env:
#   PUB_ENVIRONMENT: bot.github

# jobs:
#   # Check code formatting and static analysis on a single OS (linux)
#   # against Dart dev.
#   analyze:
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         sdk: [dev]
#     steps:
#       - uses: actions/checkout@v3
#       - uses: dart-lang/setup-dart@v1.3
#         with:
#           sdk: ${{ matrix.sdk }}
#       - id: install
#         name: Install dependencies
#         run: dart pub get
#         run: dart pub get
#       - name: Check formatting
#         run: dart format --output=none --set-exit-if-changed .
#         if: always() && steps.install.outcome == 'success'
#       - name: Analyze code
#         run: dart analyze --fatal-infos
#         if: always() && steps.install.outcome == 'success'

#   # Run tests on a matrix consisting of two dimensions:
#   # 1. OS: ubuntu-latest, macos-latest, windows-latest
#   # 2. release channel: dev
#   test:
#     needs: analyze
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-latest, macos-latest, windows-latest]
#         sdk: [2.15.0, dev]
#     steps:
#       - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
#       - uses: dart-lang/setup-dart@6a218f2413a3e78e9087f638a238f6b40893203d
#         with:
#           sdk: ${{ matrix.sdk }}
#       - id: install
#         name: Install dependencies
#         run: dart pub get
#       - name: Run VM tests
#         run: dart test --platform vm
#         if: always() && steps.install.outcome == 'success'

#   coverage:
#     needs: test
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
#       - uses: dart-lang/setup-dart@6a218f2413a3e78e9087f638a238f6b40893203d
#         with:
#           sdk: dev
#       - id: install
#         name: Install dependencies
#         run: dart pub get
#       - name: Collect and report coverage
#         run: dart run bin/test_with_coverage.dart --port=9292
#       - name: Upload coverage
#         uses: coverallsapp/github-action@9ba913c152ae4be1327bfb9085dc806cedb44057
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           path-to-lcov: coverage/lcov.info
